// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SCHEMA_HARSH_FLAT_TEST_H_
#define FLATBUFFERS_GENERATED_SCHEMA_HARSH_FLAT_TEST_H_

#include "flatbuffers/flatbuffers.h"

namespace harsh {
namespace flat {
namespace test {

struct TestAppend;

struct TextureData;

struct Texture;

enum NBA {
  NBA_GSW = 1,
  NBA_CAV = 2,
  NBA_TOR = 3,
  NBA_MIN = NBA_GSW,
  NBA_MAX = NBA_TOR
};

inline const char **EnumNamesNBA() {
  static const char *names[] = { "GSW", "CAV", "TOR", nullptr };
  return names;
}

inline const char *EnumNameNBA(NBA e) { return EnumNamesNBA()[static_cast<int>(e) - static_cast<int>(NBA_GSW)]; }

enum Any {
  Any_NONE = 0,
  Any_TextureData = 1,
  Any_Texture = 2,
  Any_MIN = Any_NONE,
  Any_MAX = Any_Texture
};

inline const char **EnumNamesAny() {
  static const char *names[] = { "NONE", "TextureData", "Texture", nullptr };
  return names;
}

inline const char *EnumNameAny(Any e) { return EnumNamesAny()[static_cast<int>(e)]; }

inline bool VerifyAny(flatbuffers::Verifier &verifier, const void *union_obj, Any type);

struct TestAppend FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TEST_NUM = 4,
    VT_TEST_NUM2 = 6
  };
  int32_t test_num() const { return GetField<int32_t>(VT_TEST_NUM, 0); }
  int32_t test_num2() const { return GetField<int32_t>(VT_TEST_NUM2, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TEST_NUM) &&
           VerifyField<int32_t>(verifier, VT_TEST_NUM2) &&
           verifier.EndTable();
  }
};

struct TestAppendBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_test_num(int32_t test_num) { fbb_.AddElement<int32_t>(TestAppend::VT_TEST_NUM, test_num, 0); }
  void add_test_num2(int32_t test_num2) { fbb_.AddElement<int32_t>(TestAppend::VT_TEST_NUM2, test_num2, 0); }
  TestAppendBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TestAppendBuilder &operator=(const TestAppendBuilder &);
  flatbuffers::Offset<TestAppend> Finish() {
    auto o = flatbuffers::Offset<TestAppend>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<TestAppend> CreateTestAppend(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t test_num = 0,
   int32_t test_num2 = 0) {
  TestAppendBuilder builder_(_fbb);
  builder_.add_test_num2(test_num2);
  builder_.add_test_num(test_num);
  return builder_.Finish();
}

struct TextureData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_IMAGE_SIZE = 4,
    VT_IMAGE_DATA = 6,
    VT_TEST_NUM2 = 8,
    VT_IMAGE_TEST = 10
  };
  int32_t image_size() const { return GetField<int32_t>(VT_IMAGE_SIZE, 0); }
  const flatbuffers::Vector<uint8_t> *image_data() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_IMAGE_DATA); }
  int32_t test_num2() const { return GetField<int32_t>(VT_TEST_NUM2, 0); }
  int16_t image_test() const { return GetField<int16_t>(VT_IMAGE_TEST, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_IMAGE_SIZE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_IMAGE_DATA) &&
           verifier.Verify(image_data()) &&
           VerifyField<int32_t>(verifier, VT_TEST_NUM2) &&
           VerifyField<int16_t>(verifier, VT_IMAGE_TEST) &&
           verifier.EndTable();
  }
};

struct TextureDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_image_size(int32_t image_size) { fbb_.AddElement<int32_t>(TextureData::VT_IMAGE_SIZE, image_size, 0); }
  void add_image_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> image_data) { fbb_.AddOffset(TextureData::VT_IMAGE_DATA, image_data); }
  void add_test_num2(int32_t test_num2) { fbb_.AddElement<int32_t>(TextureData::VT_TEST_NUM2, test_num2, 0); }
  void add_image_test(int16_t image_test) { fbb_.AddElement<int16_t>(TextureData::VT_IMAGE_TEST, image_test, 0); }
  TextureDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TextureDataBuilder &operator=(const TextureDataBuilder &);
  flatbuffers::Offset<TextureData> Finish() {
    auto o = flatbuffers::Offset<TextureData>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<TextureData> CreateTextureData(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t image_size = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> image_data = 0,
   int32_t test_num2 = 0,
   int16_t image_test = 0) {
  TextureDataBuilder builder_(_fbb);
  builder_.add_test_num2(test_num2);
  builder_.add_image_data(image_data);
  builder_.add_image_size(image_size);
  builder_.add_image_test(image_test);
  return builder_.Finish();
}

struct Texture FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NUM_TEXTURES = 4,
    VT_TEXTURES = 6,
    VT_NUM_TEST = 8,
    VT_NUM_TEST2 = 12,
    VT_TEST_APPEND = 14
  };
  int16_t num_textures() const { return GetField<int16_t>(VT_NUM_TEXTURES, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<TextureData>> *textures() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TextureData>> *>(VT_TEXTURES); }
  int16_t num_test() const { return GetField<int16_t>(VT_NUM_TEST, 30); }
  int16_t num_test2() const { return GetField<int16_t>(VT_NUM_TEST2, 0); }
  const TestAppend *test_append() const { return GetPointer<const TestAppend *>(VT_TEST_APPEND); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_NUM_TEXTURES) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEXTURES) &&
           verifier.Verify(textures()) &&
           verifier.VerifyVectorOfTables(textures()) &&
           VerifyField<int16_t>(verifier, VT_NUM_TEST) &&
           VerifyField<int16_t>(verifier, VT_NUM_TEST2) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TEST_APPEND) &&
           verifier.VerifyTable(test_append()) &&
           verifier.EndTable();
  }
};

struct TextureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_num_textures(int16_t num_textures) { fbb_.AddElement<int16_t>(Texture::VT_NUM_TEXTURES, num_textures, 0); }
  void add_textures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TextureData>>> textures) { fbb_.AddOffset(Texture::VT_TEXTURES, textures); }
  void add_num_test(int16_t num_test) { fbb_.AddElement<int16_t>(Texture::VT_NUM_TEST, num_test, 30); }
  void add_num_test2(int16_t num_test2) { fbb_.AddElement<int16_t>(Texture::VT_NUM_TEST2, num_test2, 0); }
  void add_test_append(flatbuffers::Offset<TestAppend> test_append) { fbb_.AddOffset(Texture::VT_TEST_APPEND, test_append); }
  TextureBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TextureBuilder &operator=(const TextureBuilder &);
  flatbuffers::Offset<Texture> Finish() {
    auto o = flatbuffers::Offset<Texture>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<Texture> CreateTexture(flatbuffers::FlatBufferBuilder &_fbb,
   int16_t num_textures = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TextureData>>> textures = 0,
   int16_t num_test = 30,
   int16_t num_test2 = 0,
   flatbuffers::Offset<TestAppend> test_append = 0) {
  TextureBuilder builder_(_fbb);
  builder_.add_test_append(test_append);
  builder_.add_textures(textures);
  builder_.add_num_test2(num_test2);
  builder_.add_num_test(num_test);
  builder_.add_num_textures(num_textures);
  return builder_.Finish();
}

inline bool VerifyAny(flatbuffers::Verifier &verifier, const void *union_obj, Any type) {
  switch (type) {
    case Any_NONE: return true;
    case Any_TextureData: return verifier.VerifyTable(reinterpret_cast<const TextureData *>(union_obj));
    case Any_Texture: return verifier.VerifyTable(reinterpret_cast<const Texture *>(union_obj));
    default: return false;
  }
}

inline const harsh::flat::test::Texture *GetTexture(const void *buf) { return flatbuffers::GetRoot<harsh::flat::test::Texture>(buf); }

inline bool VerifyTextureBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<harsh::flat::test::Texture>(); }

inline void FinishTextureBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<harsh::flat::test::Texture> root) { fbb.Finish(root); }

}  // namespace test
}  // namespace flat
}  // namespace harsh

#endif  // FLATBUFFERS_GENERATED_SCHEMA_HARSH_FLAT_TEST_H_
